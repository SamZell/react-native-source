/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

package com.facebook.react.modules.common;

import com.facebook.common.logging.FLog;
import com.facebook.react.bridge.CatalystInstance;
import com.facebook.react.bridge.NativeModule;
import com.facebook.react.common.ReactConstants;

/**
 * 清洁敏感的用户数据从本地模块实现{ @代码清洁}接口。这是有用的，例如当一个用户登录的应用程序
 * Cleans sensitive user data from native modules that implement the {@code Cleanable} interface.
 * This is useful e.g. when a user logs out from an app.
 */
public class ModuleDataCleaner {

  /**
   *表示一个模块可能包含敏感的用户数据，应清理注销。
   *
   *应清洁的数据类型：
   *持续的数据（磁盘），可能包含用户信息或内容。
   *保留（静态）在内存中的数据，可能包含用户信息或内容。
   *
   *请注意以下类型的模块不需要在这里被清除：
   *模块的用户数据保持在非静态字段的内存中，假设应用程序使用一个
   *每个查看上下文的单独实例。
   * -当催化剂实例时，删除所有持久数据（临时文件等）的模块
   *摧毁。这是因为退出意味着实例被销毁。应用程序应执行
   *这。
   * /
   * Indicates a module may contain sensitive user data and should be cleaned on logout.
   *
   * Types of data that should be cleaned:
   * - Persistent data (disk) that may contain user information or content.
   * - Retained (static) in-memory data that may contain user info or content.
   *
   * Note that the following types of modules do not need to be cleaned here:
   * - Modules whose user data is kept in memory in non-static fields, assuming the app uses a
   *   separate instance for each viewer context.
   * - Modules that remove all persistent data (temp files, etc) when the catalyst instance is
   *   destroyed. This is because logout implies that the instance is destroyed. Apps should enforce
   *   this.
   */
  public interface Cleanable {

    void clearSensitiveData();
  }

  public static void cleanDataFromModules(CatalystInstance catalystInstance) {
    for (NativeModule nativeModule : catalystInstance.getNativeModules()) {
      if (nativeModule instanceof Cleanable) {
        FLog.d(ReactConstants.TAG, "Cleaning data from " + nativeModule.getName());
        ((Cleanable) nativeModule).clearSensitiveData();
      }
    }
  }
}
