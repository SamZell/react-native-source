/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */

package com.facebook.react.bridge;

/**
 * 监听activity生命周期的类
 * Listener for receiving activity lifecycle events.
 *
 * 当多个Activity共享一个实例时，只有最近一个的生命周期事件得到转发给侦听器。
 * When multiple activities share a react instance, only the most recent one's lifecycle events get
 * forwarded to listeners. Consider the following scenarios:
 *
 * 1.从Activity A到B会绑定2个事件，A的onHostPause和B的onHostResume,别的事件，比如Ar onHostDestory就会被忽视,
 * 1. Navigating from Activity A to B will trigger two events: A#onHostPause and B#onHostResume. Any
 *    subsequent lifecycle events coming from Activity A, such as onHostDestroy, will be ignored.
 *
 * 2.如果从B回到A的时候也是相同的事件，B的pause和a的resume ,像onHostDestory事件就会被忽略
 * 2. Navigating back from Activity B to Activity A will trigger the same events: B#onHostPause and
 *    A#onHostResume. Any subsequent events coming from Activity B, such as onHostDestroy, are
 *    ignored.

 * 3.如果从ActivityA 返回到 没有React的Activty，就只会触发2个事件,一个是onHostPause,和onHostDestory
 * 3. Navigating back from Activity A to a non-React Activity or to the home screen will trigger two
 *    events: onHostPause and onHostDestroy.
 * 4.如果Activity A直接中转到无ReactActivtyB时，只会有一个事件，onHostPause, 如果A 被销毁了，那只会触发ondestory
 * 4. Navigating from Activity A to a non-React Activity B will trigger one event: onHostPause.
 *    Later, if Activity A is destroyed (e.g. because of resource contention), onHostDestroy is
 *    triggered.
 */
public interface LifecycleEventListener {

  /**
   * Called when host activity receives resume event (e.g. {@link Activity#onResume}. Always called
   * for the most current activity.
   */
  void onHostResume();

  /**
   * Called when host activity receives pause event (e.g. {@link Activity#onPause}. Always called
   * for the most current activity.
   */
  void onHostPause();

  /**
   * Called when host activity receives destroy event (e.g. {@link Activity#onDestroy}. Only called
   * for the last React activity to be destroyed.
   */
  void onHostDestroy();
}
